
__problem_title__ = "Optimum polynomial"
__problem_url___ = "https://projecteuler.net/problem=101"
__problem_description__ = "If we are presented with the first terms of a sequence it is " \
                          "impossible to say with certainty the value of the next term, as there " \
                          "are infinitely many polynomial functions that can model the sequence. " \
                          "As an example, let us consider the sequence of cube numbers. This is " \
                          "defined by the generating function, = : 1, 8, 27, 64, 125, 216, ... " \
                          "Suppose we were only given the first two terms of this sequence. " \
                          "Working on the principle that "simple is best" we should assume a " \
                          "linear relationship and predict the next term to be 15 (common " \
                          "difference 7). Even if we were presented with the first three terms, " \
                          "by the same principle of simplicity, a quadratic relationship should " \
                          "be assumed. We shall define OP( , ) to be the term of the optimum " \
                          "polynomial generating function for the first terms of a sequence. It " \
                          "should be clear that OP( , ) will accurately generate the terms of " \
                          "the sequence for ≤ , and potentially the (FIT) will be OP( , +1); in " \
                          "which case we shall call it a (BOP). As a basis, if we were only " \
                          "given the first term of sequence, it would be most sensible to assume " \
                          "constancy; that is, for ≥ 2, OP(1, ) = . Hence we obtain the " \
                          "following OPs for the cubic sequence: Clearly no BOPs exist for ≥ 4. " \
                          "By considering the sum of FITs generated by the BOPs (indicated in " \
                          "above), we obtain 1 + 15 + 58 = 74. Consider the following tenth " \
                          "degree polynomial generating function: = 1 − + − + − + − + − + Find " \
                          "the sum of FITs for the BOPs."

import timeit


class Solution():

    @staticmethod
    def solution1():
        pass

    @staticmethod
    def time_solutions():
        setup = 'from __main__ import Solution'
        print('Solution 1:', timeit.timeit('Solution.solution1()', setup=setup, number=1))


if __name__ == '__main__':
    s = Solution()
    print(s.solution1())
    s.time_solutions()

