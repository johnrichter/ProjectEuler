
__problem_title__ = "Pythagorean tree"
__problem_url___ = "https://projecteuler.net/problem=395"
__problem_description__ = "The is a fractal generated by the following procedure: Start with a " \
                          "unit square. Then, calling one of the sides its base (in the " \
                          "animation, the bottom side is the base): It can be shown that there " \
                          "exists at least one rectangle, whose sides are parallel to the " \
                          "largest square of the Pythagorean tree, which encloses the " \
                          "Pythagorean tree completely. Find the smallest area possible for such " \
                          "a bounding rectangle, and give your answer rounded to 10 decimal " \
                          "places."

import timeit


class Solution():

    @staticmethod
    def solution1():
        pass

    @staticmethod
    def time_solutions():
        setup = 'from __main__ import Solution'
        print('Solution 1:', timeit.timeit('Solution.solution1()', setup=setup, number=1))


if __name__ == '__main__':
    s = Solution()
    print(s.solution1())
    s.time_solutions()

