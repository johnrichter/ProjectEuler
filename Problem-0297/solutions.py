
__problem_title__ = "Zeckendorf Representation"
__problem_url___ = "https://projecteuler.net/problem=297"
__problem_description__ = "Each new term in the Fibonacci sequence is generated by adding the " \
                          "previous two terms. Starting with 1 and 2, the first 10 terms will " \
                          "be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89. Every positive integer can be " \
                          "uniquely written as a sum of nonconsecutive terms of the Fibonacci " \
                          "sequence. For example, 100 = 3 + 8 + 89. Such a sum is called the of " \
                          "the number. For any integer >0, let ( ) be the number of terms in the " \
                          "Zeckendorf representation of . Thus, (5) = 1, (14) = 2, (100) = 3 " \
                          "etc. Also, for 0< <10 , ∑ ( ) = 7894453. Find ∑ ( ) for 0< <10 ."

import timeit


class Solution():

    @staticmethod
    def solution1():
        pass

    @staticmethod
    def time_solutions():
        setup = 'from __main__ import Solution'
        print('Solution 1:', timeit.timeit('Solution.solution1()', setup=setup, number=1))


if __name__ == '__main__':
    s = Solution()
    print(s.solution1())
    s.time_solutions()

